{-# LANGUAGE ScopedTypeVariables #-}

{- Test utility to generate Raw and optimized Raw code from minimal IR examples.
   This is useful to see what code is actually generated for a specific instruction.
   It can also be used to compare code generated by different compiler versions.
   Revision 2023-08: Created this with test cases for all expressions, terminators and
   instructions as well as for trees (functions are also tested through trees).
   The test cases can be found in the testcases directory, and the output is written
   to ir2raw-out/.
-}

import Data.Functor
import Control.Monad
import Control.Arrow

import Util.FileUtil

import IR
import IR2Raw
import RetCPS (VarName(..))
import qualified Core

import qualified TR
import qualified Expr
import qualified Inst
import qualified Tree
import qualified RawOpt

main :: IO ()
main = do
    let rawProgs = map (second (\ir ->
          let raw = prog2raw ir in
            (raw, RawOpt.rawopt raw)
          )) (TR.tcs ++ Expr.tcs ++ Inst.tcs ++ Tree.tcs)
    forM_ rawProgs $ \(n,(raw, rawopt)) -> do
      writeFileD ("ir2raw-out/" ++ n ++ ".raw") (show raw)
      writeFileD ("ir2raw-out/" ++ n ++ ".rawopt") (show rawopt)