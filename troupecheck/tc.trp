import lists

let       
(* Generates a random boolean *) 
    fun generate_bool noOfTests = 
        let val rnd = random()*10 
            val res =  if rnd < 5 then false
                       else true in
        res end

(* Generates a random float based on number of tests that has been run so far. 
    noOfTests - a non negative integer to determin the size*)
    fun generate_float noOfTests = 
        let val x = random()*noOfTests 
            val is_pos = generate_bool() in 
        if is_pos then x else (-x) end

(* Generates a random integer based on number of tests that has been run so far. 
    noOfTests - a non negative integer to determin the size*)
    fun generate_int noOfTests = 
        floor (generate_float(noOfTests))


    fun pick_rand_int (i) = 
        let val seed = generate_int i in
        if seed < 0 then (-seed) mod (i+1) else 
        seed mod (i+1) end
(* Create a list of some determined size.
    f - the function determining what to element to put into the list.
    i - the number of elements to be added to the list. *)
    fun make_list (f, i) = 
        case i of 
        0 => []
        | _ => append [f()] (make_list (f, i-1))

(* Generates a randomly sized list of some specified type of elements.
    generator - the generator that should be used to create elements. 
    noOfTests - some non negative integer *)
    and generate_list_of (generator) noOfTests = 
        let val size = pick_rand_int(noOfTests) in
        make_list ((fn () => generator noOfTests), size) end

(* Generates a random generator
    noOfTests - some non negative integer *)
    fun generate_generator noOfTests = 
        let val rnd = random()
            val res = if rnd <= 1/3 then (fn() => generate_int()) else 
                      if rnd <= 2/3 then (fn() => generate_bool()) else 
                     (fn() => generate_list_of(generate_int)) in
        res end
    
(* Generates a randomly sized list of a randomly chosen type of elements
    noOfTests - some non negative integer *)
    and generate_list noOfTests = 
        let val generator = generate_generator noOfTests in 
        generate_list_of(generator) noOfTests end


(* Runs however many tests specified on a property, while always generating new inputs. 
    Drops further execution if a Failure is found. 
    prop - the property function to test.
    noOfArgs - number of arguments the property function takes.
    noOfTests - number of tests to be run.
    generator - the function that should be used to generate input values. *)
    fun core_forall (generator, prop, 0, noOfTests) = (true, (), ())
        |core_forall (generator, prop, i, noOfTests) =    
            let val args = generator noOfTests in
            if prop args then core_forall (generator, prop, i-1, noOfTests+1)
            else (false, args, noOfTests) end
    
(* Tests a property function - by default 100 times.
    noOfArgs - number of arguemnts the property takes  
    generator - the generator function to generate inputs
    prop - the property function to test. *)
    fun tc generator prop = 
        let val (succRes, args, successfulTests) = core_forall (generator, prop, 100, 0) in 
            case succRes of
            false => print "Failure at input:";
                        print args;
                        print "After running:";
                        print (successfulTests+1);
                        print "tests"
            | true => print "OK: Passed after 100 tests!"
            end

(* Tests a property function a given number of times.
    generator - the generator function to generate inputs
    prop - the property function to test.
    noOfTests - how many tests should be run. *)
    fun tc_n generator prop noOfTests = 
    let val (succRes, args, successfulTests) = core_forall (generator, prop, noOfTests, 0) in 
            case succRes of
            false => print "Failure at input:";
                        print args;
                        print "After running:";
                        print (successfulTests+1);
                        print "test(s)"
            | true => let val _ = print "OK: Passed after"
                             val _ = print noOfTests in  
                             print "tests!" end
            end
    
(* A succesful boolean property created for testing purposes 
    x,y - should be booleans *)
    fun bool_commutative x y = 
        (x andalso y) = (y andalso x)
    
(* A succesful property for numbers created for testing purposes 
    x,y - should be numbers. *)
    fun number_commutative (x, y) = 
        x < y

    fun my_reverse xs = 
        xs
(* A succesful property for lists created for testing purposes 
    xs - should be a list. *)
    fun list_reverse xs = 
        reverse(reverse xs) = xs
    
    fun pick_rand_int_stays_in_interval i = 
        pick_rand_int i <= i
    
    fun pick_rand_int_stays_in_interval_fifty() = 
        pick_rand_int 50 <= 50
    in

    print "Testing on bools commutative:";
    tc (fn i => (generate_bool i, generate_bool i)) (fn(x,y) => bool_commutative x y);
    print "Testing on numbers commutative:";
    tc (fn i => (generate_int i, generate_int i)) number_commutative;
    print "Testing on list reverse:";
    tc (fn i => (generate_list_of(generate_int) i)) list_reverse; 
    print "Testing on pick_rand_int:";
    tc_n (fn i => let val x = generate_int i in 
                    if x < 0 then -x else x end) pick_rand_int_stays_in_interval 1000;
    print "Testing on pick_rand_int (again):";
    tc (fn i => ()) pick_rand_int_stays_in_interval_fifty
    end
