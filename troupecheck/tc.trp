import lists

let       
(* -----------------GENERATORS AND UTILS--------------------------*)
(* Generates a random boolean *) 
    fun generate_bool () = 
        let val rnd = random()*10 
            val res =  if rnd < 5 then false
                       else true in
        res end

(* Generates a random float based on number of tests that has been run so far. 
    noOfTests - a non negative integer to determin the size*)
    fun generate_float noOfTests = 
        let val x = random()*noOfTests 
            val is_pos = generate_bool() in 
        if is_pos then x else (-x) end

(* Generates a random integer based on number of tests that has been run so far. 
    noOfTests - a non negative integer to determin the size*)
    fun generate_int noOfTests = 
        floor (generate_float(noOfTests))

(* Generates a random positive integer based on number of tests that has been run so far. 
    noOfTests - a non negative integer to determin the size*)
    fun pick_rand_int (i) = 
        let val seed = generate_int i in
        if seed < 0 then (-seed) mod (i+1) else 
        seed mod (i+1) end
(* Create a list of some determined size.
    f - the function determining what to element to put into the list.
    i - the number of elements to be added to the list. *)
    fun make_list (f, i) = 
        case i of 
        0 => []
        | _ => append [f()] (make_list (f, i-1))

(* Generates a randomly sized list of some specified type of elements.
    generator - the generator that should be used to create elements. 
    noOfTests - some non negative integer *)
    and generate_list_of (generator) noOfTests = 
        let val size = pick_rand_int(noOfTests) in
        make_list ((fn () => generator noOfTests), size) end

(* Generates a random generator *)
    fun generate_generator () = 
        let val rnd = random()
            val res = if rnd <= 1/3 then (fn i => generate_int i) else 
                      if rnd <= 2/3 then (fn i => generate_bool()) else 
                     (fn i => generate_list_of (generate_int) i) in
        res end
    
(* Generates a randomly sized list of a randomly chosen type of elements
    noOfTests - some non negative integer *)
    and generate_list noOfTests = 
        let val generator = generate_generator()  in 
        generate_list_of (generator) noOfTests end

(* Copied from list lib, becuase it doesn't seem to be imported with the library?*)
    fun nth (x::l) 1 = x
      | nth (x::l) n = nth l (n - 1)

(* Generates a random character - no spaces or sepcial characters,
     only letters (upper and lower case) and numbers. *)
    fun generate_char () =
        let val chars = 
            ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m",
            "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z",
            "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M",
            "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
            "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
            val x = pick_rand_int (length chars-1) +1 in 
            print x;
            nth chars x end

(* Generates a random string, with length ranging from 0 to noOfTest,
     only letters (upper and lower case) and numbers. *)
    fun generate_string noOfTests = 
        let val x = pick_rand_int noOfTests
            fun fold f acc 0 = acc 
            | fold f acc i = fold f (acc ^ f()) (i-1) in 
        fold generate_char "" x end
    
    fun one_of_two x y =
        let val bool = generate_bool () in
            if bool then x
            else y end
    
    fun abs_value x = 
        if x < 0 then -x else x 
    
    fun generate_pos_int noOfTests =
        abs_value(generate_int noOfTests)
(* -----------------CORE FUNCTIONALITY--------------------------*)
(* Runs however many tests specified on a property, while always generating new inputs. 
    Drops further execution if a Failure is found. 
    prop - the property function to test.
    noOfArgs - number of arguments the property function takes.
    noOfTests - number of tests to be run.
    generator - the function that should be used to generate input values. *)
    fun core_forall (generator, prop, 0, noOfTests) = (true, (), ())
        |core_forall (generator, prop, i, noOfTests) =    
            let val args = generator noOfTests in
            if prop args then core_forall (generator, prop, i-1, noOfTests+1)
            else (false, args, noOfTests) end
    

(* Tests a property function - by default 100 times.
    noOfArgs - number of arguemnts the property takes  
    generator - the generator function to generate inputs
    prop - the property function to test. *)
    fun tc generator prop = 
        let val (succRes, args, successfulTests) = core_forall (generator, prop, 100, 0) in 
            case succRes of
            false => print "Failure at input:";
                        print args;
                        print ("After running: " ^ (toString (successfulTests+1)) ^ " test(s)")
            | true => print "OK: Passed after 100 tests!"
            end

(* Tests a property function a given number of times.
    generator - the generator function to generate inputs
    prop - the property function to test.
    noOfTests - how many tests should be run. *)
    fun tc_n generator prop noOfTests = 
    let val (succRes, args, successfulTests) = core_forall (generator, prop, noOfTests, 0) in 
            case succRes of
            false => print "Failure at input:";
                        print args;
                        print ("After running: " ^ (toString (successfulTests+1)) ^ " test(s)")
            | true => print ("Success: Passed all " ^ (toString noOfTests) ^ " test(s).")
            end
    
(* *) 
    fun my_reverse xs = 
        xs
    
    fun my_floor i =
        if i >=0 then i - (i mod 1)
        else i - (i mod 1) - 1

(* A succesful boolean property created for testing purposes 
    x,y - should be booleans *)
    fun bool_commutative x y = 
        (x andalso y) = (y andalso x)
    
(* A succesful property for numbers created for testing purposes 
    x,y - should be numbers. *)
    fun number_commutative (x, y) = 
        x * y = y * x
(* A succesful property for lists created for testing purposes 
    xs - should be a list. *)
    fun list_reverse xs = 
        reverse(reverse xs) = xs
    
    fun pick_rand_int_stays_in_interval i = 
        pick_rand_int i <= i
    
    fun abs_value_is_always_pos i =
        abs_value i >= 0
    
    fun pick_rand_int_stays_in_interval_fifty() = 
        pick_rand_int 50 <= 50
    
    fun my_floor_test i =
        my_floor i = floor i
    
    in

    print "Testing on bools commutative:";
    tc (fn i => (generate_bool (), generate_bool ())) (fn(x,y) => bool_commutative x y);
    print "Testing on numbers commutative:";
    tc (fn i => (generate_int i, generate_int i)) number_commutative;
    print "Testing on list reverse:";
    tc (fn i => (generate_list i )) list_reverse; 
    print "Testing on pick_rand_int:";
    tc_n (fn i => generate_pos_int i) pick_rand_int_stays_in_interval 1000;
    print "Testing on pick_rand_int (again):";
    tc (fn i => ()) pick_rand_int_stays_in_interval_fifty;
    print "Testing on abs_value:";
    tc  (fn i => (one_of_two generate_int generate_float) i) abs_value_is_always_pos;
    print "Testing on my_floor:";
    tc  (fn i => generate_float i) my_floor_test
    end
