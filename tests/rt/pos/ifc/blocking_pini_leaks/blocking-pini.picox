(* scheduler-independent leak via blocking behavior *)
(* this is a nasty, nasty leak *)

let (* set secret to true or false *)
    val secret = false raisedTo `{secret}`
    
    fun wait () = let val c = raisembox ( `{secret}`)
                  in rcv (`{}`, `{secret}`, [ hn x => () ]); 
                     lowermbox (c, authority)
                  end
    fun signal p = send (p, ())

    val mainPid = self ()
    val _ = print mainPid

    fun leak i = let val c = pinipush authority 
                     val _ = wait () 
                     val _ = pinipop c
                     val _ = adv i
                     val _ = printWithLabels i                     
                     val _ = signal mainPid
                 in printWithLabels "DONE"
                 end       

    fun hang () = receive []
    (* uncomment to see that the secret is properly labelled *)
    (* val _ = adv secret  *)

    val p1 = spawn ( fn () => leak 1 )
    val p2 = spawn ( fn () => leak 2 )    
    
    val (q1, q2) = if secret  then (p1, p2) 
                              else (p2, p1)
                   
    val _ = signal q1 
    val _ = wait () 
    val _ = signal q2 

in () 
end
